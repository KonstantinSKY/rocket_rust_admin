//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "group")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub name: String,
    pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::user_group::Entity")]
    UserGroup,
}

impl Related<super::user_group::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserGroup.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_group::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_group::Relation::Group.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}


#[cfg(test)]
mod tests {
    use crate::models::group;

    use super::*;
    use chrono::Utc;
    use rocket::tokio;
    use sea_orm::{Database, DatabaseConnection, EntityTrait, Set};
    use dotenv::dotenv;
    use std::env;

    #[tokio::test]
    async fn test_create_and_query_group() {
        dotenv().ok();
        let database_url = env::var("DATABASE_URL").expect("DATABASE_URL must be set");
        let db = Database::connect(&database_url).await.expect("Failed to connect to the database");

        // Create a new group
        let new_group = group::ActiveModel {
            name: Set("Test Group".to_owned()),
            created_at: Set(Utc::now().naive_utc()),
            ..Default::default()
        };

        let result = group::Entity::insert(new_group).exec(&db).await.expect("Failed to insert group");

        // Query the group
        let group = group::Entity::find_by_id(result.last_insert_id)
            .one(&db)
            .await
            .expect("Failed to find group")
            .expect("Group not found");

        assert_eq!(group.name, "Test Group");

         // Delete the group
         // Delete the group by name
         let delete_result = group::Entity::delete_many()
         .filter(group::Column::Name.eq("Test Group"))
         .exec(&db)
         .await
         .expect("Failed to delete group");

        assert_eq!(delete_result.rows_affected, 1);

     // Ensure the group is deleted
        let group = group::Entity::find()
            .filter(group::Column::Name.eq("Test Group"))
            .one(&db)
            .await
            .expect("Failed to find group");

     assert!(group.is_none());
    }
}
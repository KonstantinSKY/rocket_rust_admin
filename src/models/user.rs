//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use chrono::Utc;
use sea_orm::entity::prelude::*;
use serde::{Serialize, Deserialize};
use schemars::JsonSchema;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize )]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub name: String,
    #[sea_orm(unique)]
    pub email: String,
    pub password: String,
    pub first_name: Option<String>,
    pub last_name: Option<String>,
    pub last_login: Option<DateTime>,
    pub is_active: bool,
    pub is_staff: bool,
    pub is_superuser: bool,
    pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::user_group::Entity")]
    UserGroup,
}

impl Related<super::user_group::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserGroup.def()
    }
}

impl Related<super::group::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_group::Relation::Group.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_group::Relation::User.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[cfg(test)]
mod tests {
    use crate::models::user;

    use super::*;
    use rocket::tokio;
    use sea_orm::{Database, EntityTrait, QueryFilter, ColumnTrait, Set};
    use dotenv::dotenv;
    use std::env;
    use chrono::Utc;

    #[tokio::test]
    async fn test_create_and_query_user() {
        dotenv().ok();
        let database_url = env::var("DATABASE_URL").expect("DATABASE_URL must be set");
        let db = Database::connect(&database_url).await.expect("Failed to connect to the database");

        // Create a new user
        let new_user = user::ActiveModel {
            name: Set("Test User".to_owned()),
            email: Set("testuser@example.com".to_owned()),
            password: Set("password123".to_owned()),
            first_name: Set(Some("Test".to_owned())),
            last_name: Set(Some("User".to_owned())),
            last_login: Set(Some(Utc::now().naive_utc())),
            is_active: Set(true),
            is_staff: Set(false),
            is_superuser: Set(false),
            created_at: Set(Utc::now().naive_utc()),
            ..Default::default()
        };

        let result = user::Entity::insert(new_user).exec(&db).await.expect("Failed to insert user");

        // Query the user
        let user = user::Entity::find_by_id(result.last_insert_id)
            .one(&db)
            .await
            .expect("Failed to find user")
            .expect("User not found");

        assert_eq!(user.name, "Test User");
        assert_eq!(user.email, "testuser@example.com");
        assert_eq!(user.password, "password123");
        assert_eq!(user.first_name, Some("Test".to_owned()));
        assert_eq!(user.last_name, Some("User".to_owned()));
        assert!(user.is_active);
        assert!(!user.is_staff);
        assert!(!user.is_superuser);
    }
}